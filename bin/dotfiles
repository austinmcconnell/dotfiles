#!/usr/bin/env bash

BIN_NAME=$(basename "$0")
COMMAND_NAME=$1
SUB_COMMAND_NAME=$2

sub_help() {
    echo "Usage: $BIN_NAME <command>"
    echo
    echo "Commands:"
    echo "   clean            Clean up caches (brew)"
    echo "   edit             Open dotfiles in IDE ($DOTFILES_IDE) and Git GUI ($DOTFILES_GIT_GUI)"
    echo "   help             This help message"
    echo "   mac-dock         Apply macOS Dock settings"
    echo "   mac-defaults     Apply macOS system defaults"
    echo "   mac-apps         Install macOS applications"
    echo "   test             Run tests"
    echo "   update           Update packages and pkg managers (OS, brew)"
}

sub_edit() {
    sh -c "$DOTFILES_IDE $DOTFILES_DIR"
    sh -c "$DOTFILES_GIT_GUI $DOTFILES_DIR"
}

sub_test() {
    bats "$DOTFILES_DIR"/test/*.bats
}

sub_update() {
    sudo softwareupdate -i -a
    mas upgrade
    brew update
    brew upgrade
}

sub_clean() {
    brew cleanup
    brew cask cleanup
}

sub_mac-defaults() {
    for DEFAULTS_FILE in "${DOTFILES_DIR}"/macos/defaults*.sh; do
        echo "Applying ${DEFAULTS_FILE}" && . "${DEFAULTS_FILE}"
    done
    echo "Done. Some changes may require a logout/restart to take effect."
}

sub_mac-apps() {
    . "${DOTFILES_DIR}/macos/apps.sh"
}

sub_mac-dock() {
    . "${DOTFILES_DIR}/macos/dock.sh" && echo "Dock reloaded."
}

# Make sure to keep this in sync with the available public commands

sub_completion() {
    echo "clean dock edit help macos test update"
}

case $COMMAND_NAME in
"" | "-h" | "--help")
    sub_help
    ;;
*)
    shift
    sub_${COMMAND_NAME} $@
    if [ $? = 127 ]; then
        echo "'$COMMAND_NAME' is not a known command or has errors." >&2
        sub_help
        exit 1
    fi
    ;;
esac
