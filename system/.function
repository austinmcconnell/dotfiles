
# Get named var (usage: get "VAR_NAME")

get() {
  echo "${!1}"
}

# Add to path
prepend-path() {
  [ -d $1 ] && PATH="$1:$PATH"
}

# Calculator
calc() {
  echo "$*" | bc -l;
}

# Weather

weather() {
  local LOCALE=`echo ${LANG:-en} | cut -c1-2`
  if [ $# -eq 0 ]; then
    local LOCATION=`curl -s ipinfo.io/loc`
  else
    local LOCATION=$1
  fi
  curl -s "$LOCALE.wttr.in/$LOCATION"
}

get_trunk_branch() {
  git rev-parse --abbrev-ref origin/HEAD | sed 's/origin\///'
}

get_fixup_commit() {
  git log --oneline $(get_trunk_branch).. | fzf --header "Select commit to fixup"  --preview "git diff {1}~1 {1} --color=always" | awk '{print $1}' | xargs -t -r git commit --fixup
}

load-nvmrc() {
  local nvmrc_path
  nvmrc_path="$(nvm_find_nvmrc)"

  if [ -n "$nvmrc_path" ]; then
    local nvmrc_node_version
    nvmrc_node_version=$(nvm version "$(cat "${nvmrc_path}")")

    if [ "$nvmrc_node_version" = "N/A" ]; then
      nvm install
    elif [ "$nvmrc_node_version" != "$(nvm version)" ]; then
      nvm use
    fi
  elif [ -n "$(PWD=$OLDPWD nvm_find_nvmrc)" ] && [ "$(nvm version)" != "$(nvm version default)" ]; then
    echo "Reverting to nvm default version"
    nvm use default
  fi
}

# Retrain muscle memory to use switch or restore instead of checkout
git () {
    if [ "$1" = "checkout" ]
    then
        echo "Don't use checkout! Use switch or restore." >&2
        return 1
    else
        command git "$@"
    fi
}
