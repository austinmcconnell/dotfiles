#!/usr/bin/env zunit

# Tests for the dotfiles command functionality
# These tests focus on the behavior of the commands rather than implementation details

@setup {
    # Create a temporary directory for testing
    TEMP_DIR=$(mktemp -d)

    # Create a directory for mock commands
    MOCK_BIN="$TEMP_DIR/bin"
    mkdir -p "$MOCK_BIN"

    # Create mock commands that will be called by dotfiles

    # Mock brew command
    cat > "$MOCK_BIN/brew" << 'EOF'
#!/usr/bin/env bash
echo "Mock brew $@"
exit 0
EOF
    chmod +x "$MOCK_BIN/brew"

    # Mock mas command
    cat > "$MOCK_BIN/mas" << 'EOF'
#!/usr/bin/env bash
echo "Mock mas $@"
exit 0
EOF
    chmod +x "$MOCK_BIN/mas"

    # Mock pyenv command
    cat > "$MOCK_BIN/pyenv" << 'EOF'
#!/usr/bin/env bash
echo "Mock pyenv $@"
exit 0
EOF
    chmod +x "$MOCK_BIN/pyenv"

    # Mock rbenv command
    cat > "$MOCK_BIN/rbenv" << 'EOF'
#!/usr/bin/env bash
echo "Mock rbenv $@"
exit 0
EOF
    chmod +x "$MOCK_BIN/rbenv"

    # Mock vim command
    cat > "$MOCK_BIN/vim" << 'EOF'
#!/usr/bin/env bash
echo "Mock vim $@"
exit 0
EOF
    chmod +x "$MOCK_BIN/vim"

    # Mock gem command
    cat > "$MOCK_BIN/gem" << 'EOF'
#!/usr/bin/env bash
echo "Mock gem $@"
exit 0
EOF
    chmod +x "$MOCK_BIN/gem"

    # Mock sudo command
    cat > "$MOCK_BIN/sudo" << 'EOF'
#!/usr/bin/env bash
echo "Mock sudo $@"
# Just run the command without sudo
"$@"
exit 0
EOF
    chmod +x "$MOCK_BIN/sudo"

    # Mock apt command
    cat > "$MOCK_BIN/apt" << 'EOF'
#!/usr/bin/env bash
echo "Mock apt $@"
exit 0
EOF
    chmod +x "$MOCK_BIN/apt"

    # Mock snap command
    cat > "$MOCK_BIN/snap" << 'EOF'
#!/usr/bin/env bash
echo "Mock snap $@"
exit 0
EOF
    chmod +x "$MOCK_BIN/snap"

    # Mock git command
    cat > "$MOCK_BIN/git" << 'EOF'
#!/usr/bin/env bash
echo "Mock git $@"
exit 0
EOF
    chmod +x "$MOCK_BIN/git"

    # Mock antidote command
    cat > "$MOCK_BIN/antidote" << 'EOF'
#!/usr/bin/env bash
echo "Mock antidote $@"
exit 0
EOF
    chmod +x "$MOCK_BIN/antidote"

    # Create mock helper functions

    # Create a mock directory for the dotfiles script to source
    MOCK_FUNCTIONS="$TEMP_DIR/functions"
    mkdir -p "$MOCK_FUNCTIONS"

    # Mock is-macos function
    cat > "$MOCK_FUNCTIONS/is-macos" << 'EOF'
#!/usr/bin/env bash
# By default, pretend we're on macOS
exit 0
EOF
    chmod +x "$MOCK_FUNCTIONS/is-macos"

    # Mock is-debian function
    cat > "$MOCK_FUNCTIONS/is-debian" << 'EOF'
#!/usr/bin/env bash
# By default, pretend we're not on Debian
exit 1
EOF
    chmod +x "$MOCK_FUNCTIONS/is-debian"

    # Mock is-work function
    cat > "$MOCK_FUNCTIONS/is-work" << 'EOF'
#!/usr/bin/env bash
# By default, pretend this is not a work computer
exit 1
EOF
    chmod +x "$MOCK_FUNCTIONS/is-work"

    # Create a mock DOTFILES_DIR with necessary files for testing
    export DOTFILES_DIR="$TEMP_DIR/dotfiles"
    mkdir -p "$DOTFILES_DIR/macos"

    # Create mock macos script files
    echo 'echo "Applied defaults"' > "$DOTFILES_DIR/macos/defaults.sh"
    echo 'echo "Applied defaults-extra"' > "$DOTFILES_DIR/macos/defaults-extra.sh"
    echo 'echo "Installing applications"' > "$DOTFILES_DIR/macos/apps.sh"
    echo 'echo "Configuring personal dock"' > "$DOTFILES_DIR/macos/dock-personal.sh"
    echo 'echo "Configuring work dock"' > "$DOTFILES_DIR/macos/dock-work.sh"
    chmod +x "$DOTFILES_DIR/macos/defaults.sh" "$DOTFILES_DIR/macos/defaults-extra.sh" \
             "$DOTFILES_DIR/macos/apps.sh" "$DOTFILES_DIR/macos/dock-personal.sh" \
             "$DOTFILES_DIR/macos/dock-work.sh"

    # Create mock repositories directory
    mkdir -p "$TEMP_DIR/.repositories/test-repo/.git"
    touch "$TEMP_DIR/.repositories/test-repo/.git/config"

    # Set up environment for testing
    export HOME="$TEMP_DIR"
    export PATH="$MOCK_FUNCTIONS:$MOCK_BIN:$PATH"
    export DOTFILES_IDE="echo Opening editor for"

    # Create a wrapper script that will run the actual dotfiles command with our mocked environment
    cat > "$TEMP_DIR/dotfiles_test" << EOF
#!/usr/bin/env bash
# This wrapper ensures we're using our mocked environment
PATH="$MOCK_FUNCTIONS:$MOCK_BIN:\$PATH"
HOME="$TEMP_DIR"
DOTFILES_DIR="$DOTFILES_DIR"
DOTFILES_IDE="echo Opening editor for"

# Run the actual dotfiles command
"$DOTFILES_DIR/../bin/dotfiles" "\$@"
EOF
    chmod +x "$TEMP_DIR/dotfiles_test"

    # Copy the actual dotfiles script to our test directory
    mkdir -p "$DOTFILES_DIR/../bin"
    cp -f "$ZDOTDIR/../bin/dotfiles" "$DOTFILES_DIR/../bin/" || cp -f "/Users/austin/.dotfiles/bin/dotfiles" "$DOTFILES_DIR/../bin/"
}

@teardown {
    # Clean up temporary directory
    rm -rf "$TEMP_DIR"
}

# Test help command displays usage information
@test 'dotfiles help command' {
    run "$TEMP_DIR/dotfiles_test" help
    assert $state equals 0
    assert "$output" contains "Usage: dotfiles <command>"
    assert "$output" contains "Commands:"
}

# Test that the default command (no arguments) shows help
@test 'dotfiles default command shows help' {
    run "$TEMP_DIR/dotfiles_test"
    assert $state equals 0
    assert "$output" contains "Usage: dotfiles <command>"
}

# Test that an invalid command shows help and returns error
@test 'dotfiles invalid command' {
    run "$TEMP_DIR/dotfiles_test" nonexistent-command
    assert $state equals 1
    assert "$output" contains "is not a known command"
}

# Test update command runs without errors
@test 'dotfiles update command' {
    run "$TEMP_DIR/dotfiles_test" update
    assert $state equals 0
    assert "$output" contains "Upgrading Homebrew packages"
    assert "$output" contains "Updating antidote"
    assert "$output" contains "Updating pyenv"
}

# Test update-repos command
@test 'dotfiles update-repos command' {
    run "$TEMP_DIR/dotfiles_test" update-repos
    assert $state equals 0
    assert "$output" contains "Updating repositories"
    assert "$output" contains "Updating repository: test-repo"
}

# Test clean command
@test 'dotfiles clean command' {
    run "$TEMP_DIR/dotfiles_test" clean
    assert $state equals 0
    assert "$output" contains "brew cleanup"
    assert "$output" contains "brew autoremove"
    assert "$output" contains "PlugClean"
}

# Test mac-defaults command
@test 'dotfiles mac-defaults command' {
    run "$TEMP_DIR/dotfiles_test" mac-defaults
    assert $state equals 0
    assert "$output" contains "Applied defaults"
    assert "$output" contains "Applied defaults-extra"
    assert "$output" contains "Some changes may require a logout/restart"
}

# Test mac-apps command
@test 'dotfiles mac-apps command' {
    run "$TEMP_DIR/dotfiles_test" mac-apps
    assert $state equals 0
    assert "$output" contains "Installing applications"
}

# Test mac-dock-personal command
@test 'dotfiles mac-dock-personal command' {
    run "$TEMP_DIR/dotfiles_test" mac-dock-personal
    assert $state equals 0
    assert "$output" contains "Configuring personal dock"
    assert "$output" contains "Dock reloaded"
}

# Test mac-dock-work command
@test 'dotfiles mac-dock-work command' {
    run "$TEMP_DIR/dotfiles_test" mac-dock-work
    assert $state equals 0
    assert "$output" contains "Configuring work dock"
    assert "$output" contains "Dock reloaded"
}

# Test edit command
@test 'dotfiles edit command' {
    run "$TEMP_DIR/dotfiles_test" edit
    assert $state equals 0
    assert "$output" contains "Opening editor for"
}

# Test completion command
@test 'dotfiles completion command' {
    run "$TEMP_DIR/dotfiles_test" completion
    assert $state equals 0
    # Check that it returns a list of commands
    assert "$output" matches "^[a-z -]+$"
}

# Test behavior when work computer is detected
@test 'dotfiles update on work computer' {
    # Override is-work to return true (0)
    cat > "$MOCK_FUNCTIONS/is-work" << 'EOF'
#!/usr/bin/env bash
# Pretend this is a work computer
exit 0
EOF
    chmod +x "$MOCK_FUNCTIONS/is-work"

    run "$TEMP_DIR/dotfiles_test" update
    assert $state equals 0
    # Should not update Mac App Store apps on work computer
    assert "$output" does_not_match "Updating Mac App Store applications"
}

# Test behavior on Debian system
@test 'dotfiles update on Debian system' {
    # Override is-macos to return false (1)
    cat > "$MOCK_FUNCTIONS/is-macos" << 'EOF'
#!/usr/bin/env bash
# Pretend we're not on macOS
exit 1
EOF
    chmod +x "$MOCK_FUNCTIONS/is-macos"

    # Override is-debian to return true (0)
    cat > "$MOCK_FUNCTIONS/is-debian" << 'EOF'
#!/usr/bin/env bash
# Pretend we're on Debian
exit 0
EOF
    chmod +x "$MOCK_FUNCTIONS/is-debian"

    run "$TEMP_DIR/dotfiles_test" update
    assert $state equals 0
    assert "$output" contains "apt update"
    assert "$output" contains "apt upgrade"
    assert "$output" contains "snap refresh"
    assert "$output" does_not_match "Upgrading Homebrew packages"
}

# Test clean command on Debian system
@test 'dotfiles clean on Debian system' {
    # Override is-macos to return false (1)
    cat > "$MOCK_FUNCTIONS/is-macos" << 'EOF'
#!/usr/bin/env bash
# Pretend we're not on macOS
exit 1
EOF
    chmod +x "$MOCK_FUNCTIONS/is-macos"

    # Override is-debian to return true (0)
    cat > "$MOCK_FUNCTIONS/is-debian" << 'EOF'
#!/usr/bin/env bash
# Pretend we're on Debian
exit 0
EOF
    chmod +x "$MOCK_FUNCTIONS/is-debian"

    run "$TEMP_DIR/dotfiles_test" clean
    assert $state equals 0
    assert "$output" contains "apt clean"
    assert "$output" contains "apt autoremove"
    assert "$output" does_not_match "brew cleanup"
}

# Test section header formatting
@test 'dotfiles section headers' {
    run "$TEMP_DIR/dotfiles_test" update
    assert $state equals 0
    assert "$output" contains "**********************************************************************"
}
