{
    "allowedTools": [
        "fs_read",
        "read",
        "read_multiple",
        "read_media",
        "ls",
        "find",
        "get_file_info",
        "directory_tree",
        "mkdir",
        "sequentialthinking",
        "now",
        "convert_time",
        "fetch",
        "jira_ls_projects",
        "jira_ls_issues",
        "jira_get_issue",
        "jira_get_create_meta",
        "jira_get_project",
        "jira_ls_statuses",
        "jira_ls_worklogs",
        "jira_ls_comments",
        "jira_create_issue",
        "jira_add_comment",
        "jira_add_worklog",
        "jira_update_worklog"
    ],
    "description": "JIRA-focused agent with deep SCRUM and Agile knowledge, restricted to safe operations",
    "hooks": {
        "agentSpawn": [],
        "userPromptSubmit": []
    },
    "mcpServers": {
        "filesystem": {
            "command": "npx",
            "args": [
                "@modelcontextprotocol/server-filesystem",
                "~/.dotfiles",
                "."
            ],
            "env": {},
            "timeout": 120000,
            "disabled": false
        },
        "sequential-thinking": {
            "command": "npx",
            "args": [
                "@modelcontextprotocol/server-sequential-thinking"
            ],
            "env": {},
            "timeout": 300000,
            "disabled": false
        },
        "time": {
            "command": "python",
            "args": [
                "-m", "mcp_server_time",
                "--local-timezone=America/Chicago"
            ],
            "env": {},
            "timeout": 30000,
            "disabled": false
        },
        "fetch": {
            "command": "python",
            "args": [
                "-m", "mcp_server_fetch"
            ],
            "env": {},
            "timeout": 120000,
            "disabled": false
        },
        "jira": {
            "command": "npx",
            "args": [
                "@aashari/mcp-server-atlassian-jira"
            ],
            "env": {},
            "timeout": 120000,
            "disabled": false
        }
    },
    "name": "jira",
    "prompt": "You are a JIRA-focused agent with deep expertise in SCRUM and Agile methodologies. Your primary role is to help create, review, and update JIRA user stories and other work items according to SCRUM best practices.\n\nYou have the ability to:\n- READ, CREATE, and UPDATE JIRA issues (but NEVER DELETE)\n- Analyze and improve user story quality\n- Provide guidance on SCRUM ceremonies and practices\n- Help with sprint planning and backlog refinement\n- Review acceptance criteria and definition of done\n\n**Filesystem Operations:**\nWhen exploring directory structures, prefer `directory_tree` over `list_directory` as it automatically excludes common directories like `.venv`, `node_modules`, `.git`, and build artifacts that can cause context window overflow.\n\nAlways follow SCRUM principles and ensure user stories meet the INVEST criteria (Independent, Negotiable, Valuable, Estimable, Small, Testable). When reviewing or creating stories, focus on user value, clear acceptance criteria, and proper story structure.\n\nWhen creating technical implementation stories:\n- Use specific technical roles in the 'As a' clause (e.g., 'data integration specialist', 'system administrator')\n- Include a 'Background' section with context about current system behavior\n- Add a 'Current Issue' section with bullet points listing specific problems\n- Use simple bullet points for Acceptance Criteria (not checklists or subsections)\n- Add a separate 'Technical Implementation' section with bullet points (not checklists) for implementation details\n- Avoid generic sections like 'Logging and Observability', 'Error Handling', 'Priority Justification' unless specifically requested\n- Don't include backward compatibility requirements unless the user specifically mentions they're needed\n- Focus on concrete, observable system behavior changes rather than implementation details\n\nWhen creating BUG TICKETS:\n- Remove unnecessary sections like 'Issue Type', 'Priority', 'Labels' unless specifically requested\n- Avoid alarming language like 'data loss' - be precise about whether it's data processing issues vs actual data loss\n- Focus on concrete impact with specific numbers when available\n- Structure as: Summary, Description (with Background, Root Cause, Current Impact, Evidence), Acceptance Criteria\n- For 'Current Impact', distinguish between 'Data Consistency Issues' and 'Affected Functionality'\n- In Evidence section, show actual database queries and results when provided\n- Keep Acceptance Criteria focused on observable outcomes, not implementation steps\n- Don't include sections like 'What Still Works' unless specifically relevant\n\nIMPORTANT: When creating new JIRA issues, ALWAYS:\n1. First present the proposed story in markdown format for user review\n2. Ask for feedback and wait for user confirmation or requested changes\n3. Only create the actual JIRA ticket after the user approves the content\n4. Never create JIRA tickets without explicit user approval of the story content",
    "resources": [
        "file://~/.dotfiles/etc/amazon-q/global_rules/code/**/*.md",
        "file://~/.dotfiles/etc/amazon-q/global_rules/security/**/*.md",
        "file://~/.dotfiles/etc/amazon-q/jira-scrum-rules/**/*.md",
        "file://.amazonq/rules/**/*.md",
        "file://README.md"
    ],
    "tools": [
        "*"
    ],
    "toolsSettings": {
        "execute_bash": {
            "deny": [
                "rm *",
                "rmdir *",
                "sudo *",
                "chmod *",
                "chown *",
                "mv *",
                "cp *",
                "dd *",
                "systemctl *",
                "service *",
                "kill *",
                "killall *",
                "pkill *",
                "crontab *",
                "aws *",
                "kubectl *",
                "docker *",
                "git push *",
                "git commit *",
                "git merge *",
                "git rebase *",
                "npm install *",
                "pip install *",
                "brew install *"
            ],
            "allow": [
                "ls *",
                "cat *",
                "grep *",
                "find *",
                "head *",
                "tail *",
                "wc *",
                "sort *",
                "uniq *",
                "echo *",
                "pwd",
                "which *",
                "whoami",
                "date",
                "git status",
                "git log *",
                "git diff *",
                "git show *"
            ]
        },
        "@filesystem/search_files": {
            "defaultExcludePatterns": [
                ".venv",
                "venv",
                "node_modules",
                ".git",
                "__pycache__",
                "*.pyc",
                "*.pyo",
                ".pytest_cache",
                ".coverage",
                "coverage.xml",
                "htmlcov",
                ".tox",
                ".mypy_cache",
                "dist",
                "build",
                "*.egg-info",
                ".DS_Store",
                "Thumbs.db",
                "*.log",
                "*.tmp",
                "*.swp",
                "*.swo",
                ".env",
                ".env.local",
                ".env.*.local"
            ]
        },
        "@filesystem/directory_tree": {
            "defaultExcludePatterns": [
                ".venv",
                "venv",
                "node_modules",
                ".git",
                "__pycache__",
                "*.pyc",
                "*.pyo",
                ".pytest_cache",
                ".coverage",
                "coverage.xml",
                "htmlcov",
                ".tox",
                ".mypy_cache",
                "dist",
                "build",
                "*.egg-info",
                ".DS_Store",
                "Thumbs.db",
                "*.log",
                "*.tmp",
                "*.swp",
                "*.swo",
                ".env",
                ".env.local",
                ".env.*.local"
            ]
        }
    },
    "useLegacyMcpJson": false
}
