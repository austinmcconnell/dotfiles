**IMPORTANT: Branch Validation Required**
Before proceeding, verify the current git branch:
```bash
git branch --show-current
```

This analysis should ONLY be performed on `main` or `master` branches. If currently on a different branch, abort the analysis and inform the user that documentation analysis should be done from the main branch.

**Prerequisite Check:**
This analysis requires the following prerequisite analysis to be completed first.

Check for required file:
- `analysis/project-analysis.md`

If the file is missing, run the prerequisite analysis first:
- Missing project-analysis.md? Run: `project-analysis`

**If the prerequisite file is missing, abort this analysis and complete the prerequisite first.**

**Documentation Analysis:**
Analyze the documentation quality, completeness, maintenance, and accessibility of this repository.

**Read Prerequisite Analysis:**
Read `analysis/project-analysis.md` to understand the project context, purpose, and scope before proceeding with the documentation analysis.

Please:

1. **Project Documentation Overview**
   - Analyze the main README.md and its completeness
   - Review project description, purpose, and value proposition
   - Identify any getting started guides or quick start documentation
   - Document any project roadmaps, changelogs, or release notes

2. **Technical Documentation**
   - Analyze API documentation and reference materials
   - Review architecture documentation and system diagrams
   - Identify any technical specifications or design documents
   - Document any database schemas or data model documentation

3. **Developer Documentation**
   - Analyze setup and installation instructions
   - Review development environment configuration guides
   - Identify any contributing guidelines or development workflows
   - Document any coding standards or style guide documentation

4. **Code Documentation**
   - Analyze inline code comments and their quality
   - Review function and class documentation (docstrings, JSDoc, etc.)
   - Identify any auto-generated documentation from code
   - Document any code examples or usage demonstrations

5. **User Documentation**
   - Analyze end-user guides and tutorials
   - Review any user manuals or help documentation
   - Identify any FAQ sections or troubleshooting guides
   - Document any video tutorials or interactive documentation

6. **Operational Documentation**
   - Analyze deployment and operations guides
   - Review monitoring, logging, and troubleshooting documentation
   - Identify any runbooks or incident response procedures
   - Document any configuration management or environment setup guides

7. **Documentation Maintenance and Quality**
   - Analyze documentation freshness and accuracy
   - Review any documentation testing or validation processes
   - Identify any broken links or outdated information
   - Document any documentation review or approval workflows

8. **Documentation Accessibility and Organization**
   - Analyze documentation structure and navigation
   - Review search functionality and content discoverability
   - Identify any documentation hosting or publishing systems
   - Document any multi-language or internationalization support

**Focus Areas:**
- How comprehensive and up-to-date is the documentation?
- Is the documentation well-organized and easy to navigate?
- Are there any significant gaps in documentation coverage?
- How accessible is the documentation to different audiences?
- What documentation tools and processes are in use?
- How is documentation maintained and kept current?

**Output Requirements:**

1. **Save to File**: Write the complete analysis to `analysis/documentation-analysis.md`
2. **Metadata Header**: Include the following metadata at the top of the file:

```markdown
# Documentation Analysis

**Generated:** [YYYY-MM-DD HH:MM:SS UTC]
**Branch:** [current branch name]
**HEAD Commit:** [full commit hash]
**Repository:** [repository name/path]

---
```

3. **Analysis Content**: Provide a comprehensive overview covering:
   - Project documentation overview and completeness
   - Technical documentation and specifications
   - Developer documentation and guides
   - Code documentation and inline comments
   - User documentation and tutorials
   - Operational documentation and runbooks
   - Documentation maintenance and quality processes
   - Documentation accessibility and organization
   - Documentation improvement recommendations

**Commands to Gather Metadata:**
```bash
# Get current branch
git branch --show-current

# Get HEAD commit hash
git rev-parse HEAD

# Get repository name
basename "$(git rev-parse --show-toplevel)"

# Get current timestamp
date -u +"%Y-%m-%d %H:%M:%S UTC"
```

**Additional Documentation Analysis Commands:**
```bash
# Find all documentation files
find . -name "*.md" -o -name "*.rst" -o -name "*.txt" -o -name "*.adoc" | head -20

# Look for documentation directories
find . -type d -name "*doc*" -o -name "*guide*" -o -name "*manual*" | head -10

# Find API documentation files
find . -name "*api*" -o -name "*swagger*" -o -name "*openapi*" -o -name "*.yaml" -o -name "*.yml" | grep -i api | head -10

# Look for configuration and setup files
find . -name "INSTALL*" -o -name "SETUP*" -o -name "CONTRIBUTING*" -o -name "CHANGELOG*" -o -name "LICENSE*" | head -10

# Check for documentation generation tools
grep -r -i "sphinx\|jekyll\|gitbook\|mkdocs\|docusaurus\|jsdoc" package.json requirements.txt Gemfile pom.xml go.mod Cargo.toml 2>/dev/null | head -10
```

**Update Strategy:**
If `analysis/documentation-analysis.md` already exists:
1. Read the existing file to understand previous documentation analysis
2. Note what has changed since the last analysis (compare commit hashes)
3. Update the analysis with new documentation insights while preserving valuable context
4. Update the metadata header with new timestamp and commit hash

**File Management:**
- The `analysis/*.md` files are automatically ignored by git (global gitignore)
- This allows analysis files to be updated over time without cluttering the repository
- Files can be manually committed if you want to track documentation quality evolution over time

Focus on assessing the current state of documentation and identifying areas for improvement rather than rewriting existing documentation.
