#!/bin/zsh
#
# .zsh_plugins.txt - antidote plugins file
#

### Overview
#
# The `.zsh_plugins.txt` file is used by antidote to configure Zsh bundles. Bundles are
# just a fancy way of referring to Zsh utilities, frameworks, prompts, or plugins.
# `.zsh_plugins.txt` is used by antidote to generate a static `.zsh_plugins.zsh` file,
# which can then be sourced in your `.zshrc`. You can use this file as a starting point
# for your own config. Strip out instructional comments (ie: lines beginning with a '#')
# and any plugins you don't need, then add what you like and make it yours!
#
# NOTE: Order matters in this file! Some bundles need to be last, and others are
# prerequisites. Read the documentation for the plugins you use to ensure proper
# configuration.
#
###

### Completions
#
# You may want to add some additional completions to Zsh. Completions look in your fpath
# for completion functions, which are functions named with a leading underscore
# (eg: _git). You need to add all supplemental completions to your fpath prior to
# running `compinit` to use completions functionality properly. You will want to find
# a completion plugin that runs `compinit` for you, or you can run it yourself in
# your .zshrc after antidote loads like this:
#
#   autoload -Uz compinit && compinit
#
###

# With antidote, using Zephyr's completion plugin is recommended. This plugin is meant
# to be run near the TOP of your .zsh_plugins.txt file.
https://github.com/mattmc3/zephyr path:plugins/completion

# zsh-users/zsh-completions is a popular plugin for adding supplemental completions.
# We combine the `path:` and `kind:fpath` annotations here:
# zsh-users/zsh-completions path:src kind:fpath

# Most other compinit plugins should be near the END of .zsh_plugins.txt so that $fpath
# has been fully populated. One such plugin is zsh-utils and its completion subplugin.
# belak/zsh-utils path:completion

### Regular Plugins
#
# Plugins are the simplest kind of bundles. You can point to a full git URL, or if you
# assume GitHub.com, then you can use the user/repo shorthand.
#
###
#https://github.com/rummik/zsh-tailf
https://github.com/ael-code/zsh-colored-man-pages


### Local Plugins
#
# Plugins don't have to come from GitHub. You can also use local files or directories to
# host your own custom plugins.
#
###
$ZDOTDIR/.aliases
#$ZDOTDIR/custom/plugins/example

### Local Plugins with Variables
#
# If you want to use variables in this file, you will need to use the envsubst utility.
# It may come installed on your system, or be available in your OS package manager. Or,
# you can use the Python one-liner wrapper function included in this sample project.
# To replace environment variables, you need to change your `antidote bundle` call to
# this.
#
#   zsh_plugins=${ZDOTDIR:-~}/.zsh_plugins.zsh
#   envsubst <${zsh_plugins:r}.txt | antidote bundle >|$zsh_plugins
#
###
# reference your own plugins
# $ZSH_CUSTOM/plugins/nodejs
# $ZSH_CUSTOM/plugins/python
# $ZSH_CUSTOM/plugins/ruby


### Prompts
#
# You can make certain themes available to the built-in Zsh prompt command using the
# `kind:fpath` annotation. A theme is not active for the prompt until this command is
# run:
#
#   autoload -Uz promptinit && promptinit
#   prompt ${prompt_name:-pure}
#
###

# Use kind:fpath for prompts you want available to promptinit.
https://github.com/romkatv/powerlevel10k kind:fpath
https://github.com/sindresorhus/pure kind:fpath
https://github.com/spaceship-prompt/spaceship-prompt kind:fpath


### Utilities
#
# Utilities aren't traditional Zsh plugins - they aren't sourced Zsh scripts. Instead
# they provide commands that can be executed from your terminal session. One good
# example is zsh-bench, which is a utility that benchmarks your Zsh config. Utility
# bundles can often be made available simply with the `kind:path` annotation.
#
###
https://github.com/romkatv/zsh-bench kind:path


### Frameworks
#
# Frameworks are a collection of Zsh features, settings, and plugins meant to ease
# Zsh configuration. Unfortunately, all that power can come with serious drawbacks.
# Frameworks can often set more settings or aliases than you need, cluttering your Zsh
# config and slowing things down. Use with caution!
#
# Frameworks are handled in antidote using the `path:location/of/plugin` annotation.
#
###

### Oh-My-Zsh
#https://github.com/ohmyzsh/ohmyzsh path:lib/clipboard.zsh
#https://github.com/ohmyzsh/ohmyzsh path:plugins/copybuffer
#https://github.com/ohmyzsh/ohmyzsh path:plugins/copyfile
#https://github.com/ohmyzsh/ohmyzsh path:plugins/copypath
#https://github.com/ohmyzsh/ohmyzsh path:plugins/extract
#https://github.com/ohmyzsh/ohmyzsh path:plugins/magic-enter
#https://github.com/ohmyzsh/ohmyzsh path:plugins/fancy-ctrl-z

###zephyr
https://github.com/mattmc3/zephyr/ path:plugins/color
https://github.com/mattmc3/zephyr/ path:plugins/directory
https://github.com/mattmc3/zephyr/ path:plugins/environment
https://github.com/mattmc3/zephyr/ path:plugins/history
https://github.com/mattmc3/zephyr/ path:plugins/homebrew
https://github.com/mattmc3/zephyr/ path:plugins/utility
https://github.com/mattmc3/zephyr/ path:plugins/zfunctions

### zsh-utils
https://github.com/belak/zsh-utils path:editor

### Deferred Plugins
#
# Antidote allows you to defer loading plugins. This is similar to concepts like "turbo
# mode" in other plugin managers. Antidote handles deferring plugins by leveraging
# romkatv/zsh-defer, which "defers execution of a zsh command until zsh has nothing else
# to do and is waiting for user input". In general, you should not defer plugins unless
# you know for sure they properly support deferred loading, and there are no adverse
# side-effects (see: https://github.com/romkatv/zsh-defer#Caveats). However, for
# certain plugins, this can greatly increase your zsh startup speed.
#
###
https://github.com/lukechilds/zsh-nvm kind:defer
https://github.com/MichaelAquilina/zsh-autoswitch-virtualenv kind:defer
https://github.com/olets/zsh-abbr kind:defer
https://github.com/xlshiz/pyenv-zsh-plugin kind:defer
https://github.com/zdharma-continuum/fast-syntax-highlighting kind:defer


### Final Plugins
#
# Remember plugin order matters! Put plugins that need run last at the bottom of your
# .zsh_plugins.txt file.
#
###

# These popular core plugins should be loaded at the end
https://github.com/zsh-users/zsh-autosuggestions
